#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_PORT 8888

int generate_random_number() {
    // Seed the random number generator with the current time
    srand(time(NULL));
    // Generate a random number between 100 and 999
    return (rand() % 900) + 100;
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);

    // Create a socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Error creating socket");
        return 1;
    }

    // Set up the server address structure
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Bind the socket to the specified address and port
    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error binding socket");
        close(server_socket);
        return 1;
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) < 0) {
        perror("Error listening");
        close(server_socket);
        return 1;
    }

    printf("Server is listening on port %d\n", SERVER_PORT);

    // Accept incoming connection
    client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_addr_len);
    if (client_socket < 0) {
        perror("Error accepting connection");
        close(server_socket);
        return 1;
    }

    // Generate a random number
    int random_number = generate_random_number();

    // Send the random number to the client
    send(client_socket, &random_number, sizeof(random_number), 0);
    printf("Sent random number: %d\n", random_number);

    // Close the sockets
    close(client_socket);
    close(server_socket);

    return 0;
}
